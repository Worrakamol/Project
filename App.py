# -*- coding: utf-8 -*-
"""
Created on Sat Apr 26 21:34:49 2025
@author: Mod
"""

import streamlit as st
import pandas as pd
import pickle

# ‡πÇ‡∏´‡∏•‡∏î model ‡πÅ‡∏•‡∏∞ encoders
@st.cache_resource
def load_model():
    model = pickle.load(open('loan_approval_model.pkl', 'rb'))
    status_encoder = pickle.load(open('employment_encoder.pkl', 'rb'))
    approval_encoder = pickle.load(open('approval_encoder.pkl', 'rb'))
    try:
        scaler = pickle.load(open('scaler.pkl', 'rb'))
    except FileNotFoundError:
        scaler = None
    return model, status_encoder, approval_encoder, scaler

model, status_encoder, approval_encoder, scaler = load_model()

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ß‡πá‡∏ö
st.title('üîé Loan Approval Prediction')
st.write('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠')

# Input form
with st.form('input_form'):
    income = st.number_input('üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Income)', min_value=0, format='%d')
    credit_score = st.number_input('üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (Credit Score)', min_value=0, max_value=850, format='%d')
    loan_amount = st.number_input('üè¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ (Loan Amount)', min_value=0, format='%d')
    dti_ratio = st.number_input('üìä Debt-to-Income Ratio (%)', min_value=0.0, max_value=100.0, format='%f')
    employment_status = st.selectbox('üßë‚Äçüíº ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', status_encoder.classes_)
    
    submitted = st.form_submit_button('‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')

if submitted:
    if income == 0 or credit_score == 0 or loan_amount == 0:
        st.warning('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢')
    else:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        input_dict = {
            'Income': income,
            'Credit_Score': credit_score,
            'Loan_Amount': loan_amount,
            'DTI_Ratio': dti_ratio,
            'Employment_Status': status_encoder.transform([employment_status])[0]
        }
        input_data = pd.DataFrame([input_dict])

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ scaler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if scaler:
            input_data_scaled = scaler.transform(input_data)
            prediction = model.predict(input_data_scaled)
        else:
            prediction = model.predict(input_data)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
        result = approval_encoder.inverse_transform(prediction)[0]

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if result == 'Approved':
            st.success(f'‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result} (‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)')
        else:
            st.error(f'‚ùå ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result} (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)')
